from SCHCPParserTool.parser import SCHCParser
import binascii

parser = SCHCParser()
#parser.rule_file = "lorawan.json"
#parser.rm.Add(file=parser.rule_file)
#parser.rm.Print() # To Check the Rule

# We add a DevEUI and AppSKey to the parser object:
DevEUI = '1122334455667788'
AppSKey = '00AABBCCDDEEFF00AABBCCDDEEFFAABB'

parser.changeDevEUI (DevEUI=DevEUI)
parser.changeAppSKey (AppSKey=AppSKey)

first_frag = binascii.unhexlify("143e1660000000029211fffe8000000000000079cd89438f0cc118fe8000000000000000000000000000015c40307002921de10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
second_frag = binascii.unhexlify("1426000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
third_frag = binascii.unhexlify("140e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
last_all1 = binascii.unhexlify("147ff32d996a000000000000000000")
print(len(first_frag)+len(second_frag)+len(third_frag))
#3e1660000000029211fffe8000000000000079cd89438f0cc118fe8000000000000000000000000000015c40307002921de10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#26000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
#0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

schc_parsed_01 = SCHCParser.parse_schc_msg(parser, schc_pkt=first_frag)
#print(schc_parsed_01)
schc_parsed_02 = SCHCParser.parse_schc_msg(parser, schc_pkt=second_frag)
#print(schc_parsed_02)
schc_parsed_03 = SCHCParser.parse_schc_msg(parser, schc_pkt=third_frag)
print(schc_parsed_03)

#schc_parsed_04 = SCHCParser.parse_schc_msg(parser, schc_pkt=forth_frag)
#print(schc_parsed_04)
#schc_parsed_05 = SCHCParser.parse_schc_msg(parser, schc_pkt=fifth_frag)
#print(schc_parsed_05)
#schc_parsed_06 = SCHCParser.parse_schc_msg(parser, schc_pkt=sixth_frag)
#print(schc_parsed_06)
#schc_parsed_07 = SCHCParser.parse_schc_msg(parser, schc_pkt=seventh_frag_tiles)
#print(schc_parsed_07)
schc_parsed_all1 = SCHCParser.parse_schc_msg(parser, schc_pkt=last_all1)
#print(schc_parsed_all1_only)

#ack_req = binascii.unhexlify("1400") # Requesting RuleID = 20, w = 00 
#ack_req1 = binascii.unhexlify("1440") # Requesting RuleID = 20, w = 01 
#ack_req_parsed0 = SCHCParser.parse_schc_msg(parser, schc_pkt=ack_req)
#ack_req_parsed1 = SCHCParser.parse_schc_msg(parser, schc_pkt=ack_req1)
#print(ack_req_parsed1)

ack = SCHCParser.reassembly(parser, fragment = schc_parsed_01, tiles_all1 = True)
print(ack)
ack = SCHCParser.reassembly(parser, fragment = schc_parsed_02, tiles_all1 = True)
print(ack)
#ack = SCHCParser.reassembly(parser, fragment = schc_parsed_03, tiles_all1 = True)
#print(ack)
print(parser.bitmap)
ack = SCHCParser.reassembly(parser, fragment = schc_parsed_all1, tiles_all1 = True)
#ack = SCHCParser.reassembly(parser, fragment = ack_req_parsed0, tiles_all1 = False)
print(ack)
rec1_frag = binascii.unhexlify("140e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
rec1_frag_parsed = SCHCParser.parse_schc_msg(parser, schc_pkt=rec1_frag)
ack = SCHCParser.reassembly(parser, fragment = rec1_frag_parsed, tiles_all1 = True)
print(parser.bitmap)
print(ack)

# Add case for W = 01 and all1 true for ack request

#fullpkt = binascii.unhexlify("1660000000029211fffe80000000000000a06e66666470e5a1fe8000000000000000000000000000015c
#print("deux", bitmap)

#print("lenn",len(full_pkt))

#full_pkt_pars = SCHCParser.parse_schc_msg(parser, schc_pkt=full_pkt)
#print(full_pkt_pars)